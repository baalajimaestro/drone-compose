version: '2.1'

services:
  drone-server:
    image: drone/drone:1.0.0-rc.3

    depends_on:
      - drone-mysql
    ports:
      - ${HTTP_BIND:-0.0.0.0}:${HTTP_PORT:-80}:80
      - ${HTTPS_BIND:-0.0.0.0}:${HTTPS_PORT:-443}:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/data
    environment:
      - DRONE_USER_FILTER=${DRONE_USER_FILTER}
      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_GITHUB_SERVER=${DRONE_GITHUB_SERVER}
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      - DRONE_DATABASE_DRIVER=${DRONE_DATABASE_DRIVER}
      - DRONE_DATABASE_DATASOURCE=${DRONE_DATABASE_DATASOURCE}
      - DRONE_DATABASE_SECRET=${DRONE_DATABASE_SECRET}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}

    restart: always
    networks:
      drone-network:
        aliases:
          - drone

  drone-agent:
    image: drone/agent:1.0.0-rc.3

    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_SERVER=${DRONE_RPC_SERVER}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY}
      - DRONE_RUNNER_NAME=${DRONE_RUNNER_NAME}

    restart: always
    networks:
      drone-network:
        aliases:
          - agent

  drone-mysql:
    image: mariadb:10.2

    volumes:
      - mysql-vol-1:/var/lib/mysql/
    environment:
      - MYSQL_ROOT_PASSWORD=${DATABASE_ROOT}
      - MYSQL_DATABASE=${DATABASE_NAME}
      - MYSQL_USER=${DATABASE_USER}
      - MYSQL_PASSWORD=${DATABASE_PASS}

    restart: always
    networks:
      drone-network:
        aliases:
          - mysql

networks:
  drone-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET}

volumes:
  mysql-vol-1: